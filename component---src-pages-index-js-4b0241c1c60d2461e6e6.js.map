{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["IndexPage","_ref","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","title","keywords","allNodeArticle","edges","map","edge","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","node","id","Date","created","style","maxWidth","marginBottom","width","gatsby_image__WEBPACK_IMPORTED_MODULE_5___default","fluid","relationships","field_image","localFile","childImageSharp","dangerouslySetInnerHTML","__html","body","value","split","splice","join","query","SEO","description","lang","meta","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"4MAwBeA,UAhBG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAChBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,OAAOC,SAAU,mCAC3BP,EAAKQ,eAAeC,MAAMC,IAAI,SAAAC,GAAI,OACjCV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACS,EAAA,KAAD,CAAMC,GAAKF,EAAKG,KAAKC,IAAOJ,EAAKG,KAAKR,QAC1CL,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,UAAMa,KAAKL,EAAKG,KAAKG,WAC5BhB,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAAEC,SAAQ,QAAWC,aAAY,UAAaC,MAAK,SAC7DpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAKqB,MAAQZ,EAAKG,KAAKU,cAAcC,YAAYC,UAAUC,gBAAgBJ,SAE7EtB,EAAAC,EAAAC,cAAA,KAAGyB,wBAAyB,CAAEC,OAAQlB,EAAKG,KAAKgB,KAAKC,MAAMC,MAAM,KAAKC,OAAO,EAAG,IAAIC,KAAK,KAAO,cAQjG,IAAMC,EAAK,sHCrBlB,SAASC,EAATrC,GAA2D,IAA5CsC,EAA4CtC,EAA5CsC,YAAaC,EAA+BvC,EAA/BuC,KAAMC,EAAyBxC,EAAzBwC,KAAMhC,EAAmBR,EAAnBQ,SAAUD,EAASP,EAATO,MAChD,OACEL,EAAAC,EAAAC,cAACqC,EAAA,YAAD,CACEL,MAAOM,EACPC,OAAQ,SAAA1C,GACN,IAAM2C,EACJN,GAAerC,EAAK4C,KAAKC,aAAaR,YACxC,OACEpC,EAAAC,EAAAC,cAAC2C,EAAA5C,EAAD,CACE6C,eAAgB,CACdT,QAEFhC,MAAOA,EACP0C,cAAa,QAAUhD,EAAK4C,KAAKC,aAAavC,MAC9CiC,KAAM,CACJ,CACEU,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAS5C,GAEX,CACE6C,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASlD,EAAK4C,KAAKC,aAAaO,QAElC,CACEH,KAAI,gBACJC,QAAS5C,GAEX,CACE2C,KAAI,sBACJC,QAASP,IAGVU,OACC9C,EAAS+C,OAAS,EACd,CACEL,KAAI,WACJC,QAAS3C,EAAS2B,KAAT,OAEX,IAELmB,OAAOd,MAtDlBvC,KAAAuD,IA8DJnB,EAAIoB,aAAe,CACjBlB,KAAI,KACJC,KAAM,GACNhC,SAAU,IAGZ6B,EAAIqB,UAAY,CACdpB,YAAaqB,IAAUC,OACvBrB,KAAMoB,IAAUC,OAChBpB,KAAMmB,IAAUE,MAChBrD,SAAUmD,IAAUG,QAAQH,IAAUC,QACtCrD,MAAOoD,IAAUC,OAAOG,YAGX1B,MAEf,IAAMK,EAAY","file":"component---src-pages-index-js-4b0241c1c60d2461e6e6.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport Img from 'gatsby-image'\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`gatsby`, `application`, `react`]} />\n    {data.allNodeArticle.edges.map(edge => (\n      <div>\n        <h3><Link to={ edge.node.id }>{ edge.node.title }</Link></h3>\n        <small><em>{ Date(edge.node.created) }</em></small>\n        <div style={{ maxWidth: `300px`, marginBottom: `1.45rem`, width: `100%` }}>\n          <Img fluid={ edge.node.relationships.field_image.localFile.childImageSharp.fluid } />\n        </div>\n        <p dangerouslySetInnerHTML={{ __html: edge.node.body.value.split(' ').splice(0, 50).join(' ') + '...' }}></p>\n      </div>\n    ))}\n  </Layout>\n)\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allNodeArticle {\n      edges {\n        node {\n          title\n          body {\n            value\n          }\n          created\n          id\n          relationships {\n            field_image {\n              localFile {\n                childImageSharp {\n                  fluid(maxWidth:400, quality: 100) {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    allNodePage {\n      edges {\n        node {\n          title\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}